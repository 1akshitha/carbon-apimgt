<%
include("/jagg/jagg.jag");
var log = new Log();
(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"), 
            appName = request.getParameter("appName"),
            apiName = request.getParameter("apiName"),
            fromDate = request.getParameter("fromDate"),
            toDate = request.getParameter("toDate"),
            site = require("/site/conf/site.json");
    allProviders = "__all_providers__";

    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'Please login first'
        });
    } else {
        var APIUsageStatisticsClient = Packages.org.wso2.carbon.apimgt.usage.client.APIUsageStatisticsClient;

        var provider = jagg.getUser().username;
        var usageStatClient = new APIUsageStatisticsClient(provider);
        
        if (provider.indexOf("@") == -1) {
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var tenantDomain = MultitenantUtils.getTenantDomain(provider);
            provider = provider + "@" + tenantDomain;
        }

        if (action === "getThrottleDataOfApplication"){

            if(appName && fromDate && toDate){

                var throttleData = usageStatClient.getThrottleDataOfApplication(appName, provider, fromDate, toDate);

                var result = [];

                for (var i = 0; i < throttleData.size(); i++) {
                    var throttleDataObj = throttleData.get(i);
                    result.push({
                        apiName : throttleDataObj.getAPIName(),
                        success_request_count : throttleDataObj.getSuccessRequestCount(),
                        throttleout_count : throttleDataObj.getThrottleOutCount()
                    });
                }
                /*
                var db = jagg.getStatDBConnection();

                var query = "select API_REQUEST_SUMMARY_MINIMAL.api, API_REQUEST_SUMMARY_MINIMAL.api_version, API_REQUEST_SUMMARY_MINIMAL.context,"
                                + " API_REQUEST_SUMMARY_MINIMAL.apiPublisher, API_REQUEST_SUMMARY_MINIMAL.applicationName, API_REQUEST_SUMMARY_MINIMAL.tenantDomain,"
                                + " sum(API_REQUEST_SUMMARY_MINIMAL.success_request_count) as success_request_count,"
                                + " sum(coalesce(API_THROTTLE_SUMMARY.throttleout_count,0)) as throttleout_count"
                                + " from API_REQUEST_SUMMARY_MINIMAL left join API_THROTTLE_SUMMARY"
                                + " on API_REQUEST_SUMMARY_MINIMAL.api_version = API_THROTTLE_SUMMARY.api_version"
                                + " and API_REQUEST_SUMMARY_MINIMAL.apiPublisher = API_THROTTLE_SUMMARY.apiPublisher"
                                + " and API_REQUEST_SUMMARY_MINIMAL.applicationName = API_THROTTLE_SUMMARY.applicationName"
                                + " and API_REQUEST_SUMMARY_MINIMAL.time = API_THROTTLE_SUMMARY.time";
                var whereQuery = " where  API_REQUEST_SUMMARY_MINIMAL.applicationName = '" + appName 
                                    + "' and API_REQUEST_SUMMARY_MINIMAL.apiPublisher = '" + provider + "'";
                var whereWithDateRange = " and API_REQUEST_SUMMARY_MINIMAL.time between '" + fromDate + "' and '" + toDate + "'";
                var groupQuery = " group by API_REQUEST_SUMMARY_MINIMAL.api_version, API_REQUEST_SUMMARY_MINIMAL.apiPublisher, API_REQUEST_SUMMARY_MINIMAL.applicationName"
                var orderByQuery = " order by API_REQUEST_SUMMARY_MINIMAL.api asc"

                var result;
                if(fromDate && toDate){
                    result = db.query(query + whereQuery + whereWithDateRange + groupQuery + orderByQuery);                    
                } else {
                    result = db.query(query + whereQuery + groupQuery + orderByQuery);
                }
                */

                print({
                    error: false,
                    usage: result
                });

            }else{
                print({
                    error: true,
                    message: 'Please provide Application Name, From Date and To Date'
                });
            }

        } else if (action === "getAppsForThrottleStats") {

            var apps = usageStatClient.getAppsForThrottleStats(provider, apiName);
            var result = [];

            for (var i = 0; i < apps.size(); i++) {
                result.push(apps.get(i));
            }

            print({
                error: false,
                usage: result
            });

        } else if (action === "getFirstAccessTime") {
            mod = jagg.module("statistics");
            var provider = jagg.getUser().username;
            var currentLocation = request.getParameter("currentLocation");
            if (currentLocation.indexOf("all-statistics") >= 0) {
                result = mod.getFirstAccessTime(allProviders);
            } else {
                result = mod.getFirstAccessTime(provider);
            }
            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        } else if (action === "isDataPublishingEnabled") {
            mod = jagg.module("statistics");
            result = mod.isDataPublishingEnabled();

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        };
        
    }
}());
%>
