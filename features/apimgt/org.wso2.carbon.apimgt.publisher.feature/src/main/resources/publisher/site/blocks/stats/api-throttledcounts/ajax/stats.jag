<%
include("/jagg/jagg.jag");
var log = new Log();
(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            apiName = request.getParameter("apiName"),
            apiVersion = request.getParameter("apiVersion"),    
            appName = request.getParameter("appName"),
            fromDate = request.getParameter("fromDate"),
            toDate = request.getParameter("toDate"),
            site = require("/site/conf/site.json");
    allProviders = "__all_providers__";

    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'Please login first'
        });
    } else {        
        var provider = jagg.getUser().username;
        var APIUsageStatisticsClient = Packages.org.wso2.carbon.apimgt.usage.client.APIUsageStatisticsClient;
        var usageStatClient = new APIUsageStatisticsClient(provider);
        
        if (provider.indexOf("@") == -1) {
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var tenantDomain = MultitenantUtils.getTenantDomain(provider);
            provider = provider + "@" + tenantDomain;
        }

        if (action === "getThrottleDataOfAPIAndApplication") {     

            if(apiName &&  fromDate && toDate){
                var throttleData = usageStatClient.getThrottleDataOfAPIAndApplication(apiName,provider,appName,fromDate,toDate);       
                var result = [];

                for (var i = 0; i < throttleData.size(); i++) {
                    var throttleDataObj = throttleData.get(i);
                    result.push({
                        time : throttleDataObj.getTime(),
                        success_request_count : throttleDataObj.getSuccessRequestCount(),
                        throttleout_count : throttleDataObj.getThrottleOutCount()
                    });
                }

                
/*
                result.push({
                    time : "2015-07-21 17:30:00",
                    success_request_count : 10,
                    throttleout_count : 20
                });

                result.push({
                    time : "2015-07-21 19:30:00",
                    success_request_count : 15,
                    throttleout_count : 25
                });
*/
                /*
                var db = jagg.getStatDBConnection();

                var selectQueryWithAppName = "select API_REQUEST_SUMMARY_MINIMAL.api, API_REQUEST_SUMMARY_MINIMAL.api_version, API_REQUEST_SUMMARY_MINIMAL.context,"
                                + " API_REQUEST_SUMMARY_MINIMAL.apiPublisher, API_REQUEST_SUMMARY_MINIMAL.applicationName, API_REQUEST_SUMMARY_MINIMAL.tenantDomain,"
                                + " API_REQUEST_SUMMARY_MINIMAL.year, API_REQUEST_SUMMARY_MINIMAL.month, API_REQUEST_SUMMARY_MINIMAL.day, API_REQUEST_SUMMARY_MINIMAL.time,"
                                + " API_REQUEST_SUMMARY_MINIMAL.success_request_count, coalesce(API_THROTTLE_SUMMARY.throttleout_count,0) as throttleout_count";
                var selectQueryWithoutAppName = "select API_REQUEST_SUMMARY_MINIMAL.api, API_REQUEST_SUMMARY_MINIMAL.api_version, API_REQUEST_SUMMARY_MINIMAL.context,"
                                + " API_REQUEST_SUMMARY_MINIMAL.apiPublisher, API_REQUEST_SUMMARY_MINIMAL.tenantDomain, API_REQUEST_SUMMARY_MINIMAL.year,"
                                + " API_REQUEST_SUMMARY_MINIMAL.month, API_REQUEST_SUMMARY_MINIMAL.day, API_REQUEST_SUMMARY_MINIMAL.time,"
                                + " sum(API_REQUEST_SUMMARY_MINIMAL.success_request_count) as success_request_count,"
                                + " sum(coalesce(API_THROTTLE_SUMMARY.throttleout_count,0)) as throttleout_count";
                var joinQuery = " from API_REQUEST_SUMMARY_MINIMAL left join API_THROTTLE_SUMMARY"
                                + " on API_REQUEST_SUMMARY_MINIMAL.api_version = API_THROTTLE_SUMMARY.api_version"
                                + " and API_REQUEST_SUMMARY_MINIMAL.apiPublisher = API_THROTTLE_SUMMARY.apiPublisher"
                                + " and API_REQUEST_SUMMARY_MINIMAL.applicationName = API_THROTTLE_SUMMARY.applicationName"
                                + " and API_REQUEST_SUMMARY_MINIMAL.time = API_THROTTLE_SUMMARY.time";
                var whereQuery = " where API_REQUEST_SUMMARY_MINIMAL.api = '" + apiName + "' "
                                    + " and API_REQUEST_SUMMARY_MINIMAL.apiPublisher = '" + provider + "'";
                var whereAppQuery = " and API_REQUEST_SUMMARY_MINIMAL.applicationName = '" + appName + "'";
                var whereWithDateRange = " and API_REQUEST_SUMMARY_MINIMAL.time between '" + fromDate + "' and '" + toDate + "'";              
                var groupByQuery = " group by API_REQUEST_SUMMARY_MINIMAL.api, API_REQUEST_SUMMARY_MINIMAL.apiPublisher, API_REQUEST_SUMMARY_MINIMAL.time";
                var orderByQuery = " order by API_REQUEST_SUMMARY_MINIMAL.time asc";

                var result,query;
                if (appName) {
                    query = selectQueryWithAppName + joinQuery + whereQuery + whereAppQuery;
                } else {
                    query = selectQueryWithoutAppName + joinQuery + whereQuery;
                }

                if(fromDate && toDate){
                    query = query + whereWithDateRange;
                }

                if (!appName) {
                    query = query + groupByQuery;
                }

                result = db.query(query + orderByQuery);
                log.info(result);
                */
                print({
                    error: false,
                    usage: result
                });

            }else{
                print({
                    error: true,
                    message: 'Please provide at least API Name, From date and To date'
                });
            }

        } else if (action === "getAPIsForThrottleStats") {

            var apis = usageStatClient.getAPIsForThrottleStats(provider);
            var result = [];

            for (var i = 0; i < apis.size(); i++) {
                result.push(apis.get(i));
            }

            print({
                error: false,
                usage: result
            });

        } else if (action === "getFirstAccessTime") {
            mod = jagg.module("statistics");
            var provider = jagg.getUser().username;
            var currentLocation = request.getParameter("currentLocation");
            if (currentLocation.indexOf("all-statistics") >= 0) {
                result = mod.getFirstAccessTime(allProviders);
            } else {
                result = mod.getFirstAccessTime(provider);
            }
            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        } else if (action === "isDataPublishingEnabled") {
            mod = jagg.module("statistics");
            result = mod.isDataPublishingEnabled();

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        };
    }
}());
%>
