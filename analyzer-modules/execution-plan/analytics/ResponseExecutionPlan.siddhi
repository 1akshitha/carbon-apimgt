@Plan:name('ResponseExecutionPlan')
define stream FooStream (symbol string, price float, volume long);

@source(type='inMemory', topic='symbol', @map(type='passThrough'))
Define stream ResponseStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
request_count INT,
response_count INT,
request_event_time LONG,
response_event_time LONG,
gateway_domain STRING,
gateway_ip STRING,
is_throttled BOOL,
throttled_reason STRING,
throttled_policy STRING,
client_ip STRING,
user_agent STRING,
host_name STRING,

cache_hit  BOOL,
response_size  INT,
protocol  STRING,
response_code  INT,
destination  STRING,
response_time  LONG,
service_time  LONG,
backend_time  LONG,
backend_latency  LONG,
security_latency  LONG,
throttling_latency  LONG,
request_mediation_latency  LONG,
respons_mediation_latency  LONG,
other_latency  LONG
);

@Store(type="rdbms", jdbc.url="jdbc:mysql://localhost:3306/test?useSSL=false", username="root", password="pass",field.length="api:254", pool.properties="driverClassName:com.mysql.jdbc.Driver" )
@PrimaryKey("api,time")
define table api_request_summary (api string, version string, publisher string, context string, consumer_key string, application_name string, user_id string, uri_template string, method string, request_count long, time long, year int ,month int, day int, hour int, minute int);



-- second
from ResponseStream#window.externalTimeBatch(request_event_time, 1 sec, 0, 10 sec, true)
select request_event_time as startTime, api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method,
max(request_event_time) as requestTime, count() as total_request_count
group by api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method
insert into perSecondRequestsTemp;

from perSecondRequestsTemp
select (startTime - (startTime % 1000)) as startTime,
convert((startTime - (startTime % 1000)), 'string') as facetStartTime,
(startTime / (1000 * 60 * 60 * 24 * 365)) + 1970 as year,
(startTime / (1000 * 60 * 60 * 24 * 365)) % 12 as month,
(startTime / (1000 * 60 * 60 * 24)) % 30 as day,
(startTime / (1000 * 60 * 60)) % 24 as hour,
(startTime / (1000 * 60)) % 60 as minute,
(startTime / 1000) % 60 as second,
api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method,
requestTime, total_request_count
insert into perSecondRequests;


-- minute
from perSecondRequests
select startTime,
/*str:concat(facetStartTime, '_', api, '_', version, '_', publisher, '_', context, '_', consumer_key, '_', application_name, '_', user_id) as uniqueId,*/
"asdasdsadsadsds" as uniqueId,
year, month, day, hour, minute, second, consumer_key, context, api, version, uri_template, method,
requestTime, user_id, publisher, total_request_count, application_name
insert into perSecondRequestsWithUniqueId;

/*from perSecondRequestsWithUniqueId#window.uniqueExternalTimeBatch(uniqueId, startTime, 60 sec, 59999 millisec, 10 sec, true)*/
from perSecondRequestsWithUniqueId#window.externalTimeBatch(startTime, 60 sec, 59999 millisec, 10 sec, true)
select startTime, consumer_key, context, api, version, uri_template, method,
max(requestTime) as requestTime, user_id, publisher, sum(total_request_count) as total_request_count,
application_name
group by consumer_key, context, api, version, user_id, publisher, uri_template, method
insert into perMinuteRequestsTemp;


from perMinuteRequestsTemp select
(startTime / (1000 * 60 * 60 * 24 * 365)) + 1970 as year,
(startTime / (1000 * 60 * 60 * 24 * 365)) % 12 as month,
(startTime / (1000 * 60 * 60 * 24)) % 30 as day,
(startTime / (1000 * 60 * 60)) % 24 as hour,
(startTime / (1000 * 60)) % 60 as minute,
consumer_key, context, api, version,application_name, uri_template, method,
requestTime, user_id, publisher, total_request_count
insert into perMinuteRequests;

from perMinuteRequests
select api, version, publisher, context, consumer_key, application_name, user_id , uri_template, method, total_request_count as request_count, requestTime as time,
convert(year, 'int') as year,
convert(month, 'int') as month,
convert(day, 'int') as day,
convert(hour, 'int') as hour,
convert(minute, 'int') as minute
insert into api_request_summary;